
ex6.2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005db  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000555  00000000  00000000  00000783  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000021e  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000323  00000000  00000000  00000f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000124f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include <avr/io.h>

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	1f 92       	push	r1
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char input;
	unsigned char answer;

	DDRA = 0x00;		//είσοδος A
  76:	1a ba       	out	0x1a, r1	; 26
	DDRC = 0xff;		//έξοδος C
  78:	8f ef       	ldi	r24, 0xFF	; 255
  7a:	84 bb       	out	0x14, r24	; 20

	while (1)
	{
		/* Διάβασμα εισόδου. */
		input = PINA;
  7c:	89 b3       	in	r24, 0x19	; 25
  7e:	89 83       	std	Y+1, r24	; 0x01
		/* FO=answer(5)=(ABC+CD+DE)' */
		if (((input & 0b00000111) == 0b00000111) || ((input & 0b00001100) == 0b00001100) || ((input & 0b00011000) == 0b00011000)) answer = 0b00000000; else answer = 0b00100000;
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	87 70       	andi	r24, 0x07	; 7
  84:	87 30       	cpi	r24, 0x07	; 7
  86:	51 f0       	breq	.+20     	; 0x9c <main+0x30>
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	8c 70       	andi	r24, 0x0C	; 12
  8c:	8c 30       	cpi	r24, 0x0C	; 12
  8e:	41 f0       	breq	.+16     	; 0xa0 <main+0x34>
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	88 71       	andi	r24, 0x18	; 24
  94:	88 31       	cpi	r24, 0x18	; 24
  96:	31 f0       	breq	.+12     	; 0xa4 <main+0x38>
  98:	80 e2       	ldi	r24, 0x20	; 32
  9a:	05 c0       	rjmp	.+10     	; 0xa6 <main+0x3a>
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	03 c0       	rjmp	.+6      	; 0xa6 <main+0x3a>
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <main+0x3a>
  a4:	80 e0       	ldi	r24, 0x00	; 0
		/* F1=answer(6)=ABC+D'E' */
		if (((input & 0b00000111) == 0b00000111) || ((input & 0b00011000) == 0b00000000)) answer |= 0b01000000;
  a6:	99 81       	ldd	r25, Y+1	; 0x01
  a8:	97 70       	andi	r25, 0x07	; 7
  aa:	97 30       	cpi	r25, 0x07	; 7
  ac:	19 f0       	breq	.+6      	; 0xb4 <main+0x48>
  ae:	99 81       	ldd	r25, Y+1	; 0x01
  b0:	98 71       	andi	r25, 0x18	; 24
  b2:	09 f4       	brne	.+2      	; 0xb6 <main+0x4a>
  b4:	80 64       	ori	r24, 0x40	; 64
		/* F2=answer(7)=F0+F1 */
		if (answer & 0b01100000) answer |= 0b10000000;
  b6:	98 2f       	mov	r25, r24
  b8:	90 76       	andi	r25, 0x60	; 96
  ba:	09 f0       	breq	.+2      	; 0xbe <main+0x52>
  bc:	80 68       	ori	r24, 0x80	; 128
		/* Εμφάνιση εξόδου. */
		PORTC = answer;
  be:	85 bb       	out	0x15, r24	; 21
	}
  c0:	dd cf       	rjmp	.-70     	; 0x7c <main+0x10>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
