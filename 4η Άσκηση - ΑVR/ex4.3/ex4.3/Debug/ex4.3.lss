
ex4.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000134  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005f6  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000564  00000000  00000000  0000080a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000284  00000000  00000000  00000d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000ff4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030c  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c0  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000013f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */ 

#include <avr/io.h>

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xff;					//Η θύρα A τίθεται έξοδος.
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x00;					//Η θύρα C τίθεται είσοδος.
  7a:	14 ba       	out	0x14, r1	; 20
									//και στον new αποθηκεύεται προσωρινά κάθε νέα είσοδος.
	unsigned char u, out;			//Στον u αποθηκεύεται η θέση του MSB της εισόδου
									//και στο out η τρέχουσα έξοδος.
	
	out = 0x80;						//Αρχικά απεικονίζεται το bit
	PORTA = out;					//στο MSB.
  7c:	80 e8       	ldi	r24, 0x80	; 128
  7e:	8b bb       	out	0x1b, r24	; 27
	volatile unsigned char t, new;	//Στον t αποθηκεύεται η είσοδος
									//και στον new αποθηκεύεται προσωρινά κάθε νέα είσοδος.
	unsigned char u, out;			//Στον u αποθηκεύεται η θέση του MSB της εισόδου
									//και στο out η τρέχουσα έξοδος.
	
	out = 0x80;						//Αρχικά απεικονίζεται το bit
  80:	20 e8       	ldi	r18, 0x80	; 128
	 * εκτελείται μία αντίστοιχη λειτουργία στο απεικονιζόμενο bit *
	 * της θύρας B με προτεραιότητα από SW4 σε SW0 αν πατηθούν πολλά μαζί. */
    while (1)						//Διαρκής επανάληψη.
    {
		/*Αναμονή μέχρι να πατηθεί κάποιο από τα SW0-4*/
		while (!(t = PINC & 0x1f));		//Επαναλαμβάνει όσο τα 5 LSB του PINC είναι 0.
  82:	83 b3       	in	r24, 0x13	; 19
  84:	8f 71       	andi	r24, 0x1F	; 31
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	88 23       	and	r24, r24
  8a:	d9 f3       	breq	.-10     	; 0x82 <main+0x16>
		
		/*Αναμονή μέχρι κάποιο κουμπί να μην είναι πλέον πατημένο. 
		 *Αν όσο είναι πατημένο κάποιο κουμπί πατηθεί κάποιο μεγαλύτερο,
		 *ενημερώνεται ο t, αλλιώς παραμένει ως έχει, μέχρι να ελευθερωθεί κάποιο από όλα.*/
		while((new = PINC & 0x1f) >= t) t = new;		//Αν πατηθεί κάποιο ενημερώνεται το t.
  8c:	83 b3       	in	r24, 0x13	; 19
  8e:	8f 71       	andi	r24, 0x1F	; 31
  90:	8a 83       	std	Y+2, r24	; 0x02
  92:	99 81       	ldd	r25, Y+1	; 0x01
  94:	89 17       	cp	r24, r25
  96:	40 f0       	brcs	.+16     	; 0xa8 <main+0x3c>
  98:	8a 81       	ldd	r24, Y+2	; 0x02
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	83 b3       	in	r24, 0x13	; 19
  9e:	8f 71       	andi	r24, 0x1F	; 31
  a0:	8a 83       	std	Y+2, r24	; 0x02
  a2:	99 81       	ldd	r25, Y+1	; 0x01
  a4:	89 17       	cp	r24, r25
  a6:	c0 f7       	brcc	.-16     	; 0x98 <main+0x2c>
		t ^= new;						//Τώρα ο t έχει άσσους σε όσα κουμπιά από 1
  a8:	9a 81       	ldd	r25, Y+2	; 0x02
  aa:	89 81       	ldd	r24, Y+1	; 0x01
  ac:	89 27       	eor	r24, r25
  ae:	89 83       	std	Y+1, r24	; 0x01
										//έγιναν 0 (δηλαδή όσα αφέθηκαν).
		/*Εύρεση του μέγιστου ψηφίου της εισόδου που είναι άσσος.*/	
		u = 0x10;						//Αρχικοποιεί τον u στο 0x10,
		while (!(t & 0x10)){			//ώστε στη συνέχεια να ελέγχει αν είναι 0 ο t  
  b0:	89 81       	ldd	r24, Y+1	; 0x01
  b2:	84 fd       	sbrc	r24, 4
  b4:	14 c0       	rjmp	.+40     	; 0xde <main+0x72>
  b6:	90 e1       	ldi	r25, 0x10	; 16
			t <<= 1;					//κι αν ναι, να ολισθαίνει κι άλλο τον t
  b8:	89 81       	ldd	r24, Y+1	; 0x01
  ba:	88 0f       	add	r24, r24
  bc:	89 83       	std	Y+1, r24	; 0x01
			u >>= 1;					//και να χαμηλώνει το bit του u
  be:	96 95       	lsr	r25
		while((new = PINC & 0x1f) >= t) t = new;		//Αν πατηθεί κάποιο ενημερώνεται το t.
		t ^= new;						//Τώρα ο t έχει άσσους σε όσα κουμπιά από 1
										//έγιναν 0 (δηλαδή όσα αφέθηκαν).
		/*Εύρεση του μέγιστου ψηφίου της εισόδου που είναι άσσος.*/	
		u = 0x10;						//Αρχικοποιεί τον u στο 0x10,
		while (!(t & 0x10)){			//ώστε στη συνέχεια να ελέγχει αν είναι 0 ο t  
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	84 ff       	sbrs	r24, 4
  c4:	f9 cf       	rjmp	.-14     	; 0xb8 <main+0x4c>
			u >>= 1;					//και να χαμηλώνει το bit του u
		}								//μέχρις ότου το u να αποκτήσει τη θέση του μεγαλύτερου ψηφίου
										//του t που είναι 1.
		
		/*Εύρεση της λειτουργίας που καθορίζεται από το u και εκτέλεση της.*/
		switch (u){
  c6:	94 30       	cpi	r25, 0x04	; 4
  c8:	b9 f0       	breq	.+46     	; 0xf8 <main+0x8c>
  ca:	28 f4       	brcc	.+10     	; 0xd6 <main+0x6a>
  cc:	91 30       	cpi	r25, 0x01	; 1
  ce:	39 f1       	breq	.+78     	; 0x11e <main+0xb2>
  d0:	92 30       	cpi	r25, 0x02	; 2
  d2:	e9 f0       	breq	.+58     	; 0x10e <main+0xa2>
  d4:	2b c0       	rjmp	.+86     	; 0x12c <main+0xc0>
  d6:	98 30       	cpi	r25, 0x08	; 8
  d8:	21 f0       	breq	.+8      	; 0xe2 <main+0x76>
  da:	90 31       	cpi	r25, 0x10	; 16
  dc:	39 f5       	brne	.+78     	; 0x12c <main+0xc0>
			/*SW4 - Το bit έρχεται στο MSB.*/
			case 0x10:
				out = 0x80;				
  de:	20 e8       	ldi	r18, 0x80	; 128
				break;
  e0:	25 c0       	rjmp	.+74     	; 0x12c <main+0xc0>
			/*SW3 - Ολίσθηση κατά δύο θέσεις αριστερά.*/
			case 0x08:
				if (out & 0xC0) out >>= 6;		//Αν βρίσκεται στα δύο MSB πρέπει να πάει στην αρχή πάλι,
  e2:	82 2f       	mov	r24, r18
  e4:	80 7c       	andi	r24, 0xC0	; 192
  e6:	29 f0       	breq	.+10     	; 0xf2 <main+0x86>
  e8:	22 95       	swap	r18
  ea:	26 95       	lsr	r18
  ec:	26 95       	lsr	r18
  ee:	23 70       	andi	r18, 0x03	; 3
  f0:	1d c0       	rjmp	.+58     	; 0x12c <main+0xc0>
				else out <<= 2;					//οπότε το ολισθαίνουμε 6 θέσεις δεξιά.
  f2:	22 0f       	add	r18, r18
  f4:	22 0f       	add	r18, r18
  f6:	1a c0       	rjmp	.+52     	; 0x12c <main+0xc0>
				break;
			/*SW2 - Ολίσθηση κατά δύο θέσεις δεξιά.*/
			case 0x04:
				if (out & 0x03) out <<= 6;		//Όμοια για τα δύο LSB.
  f8:	82 2f       	mov	r24, r18
  fa:	83 70       	andi	r24, 0x03	; 3
  fc:	29 f0       	breq	.+10     	; 0x108 <main+0x9c>
  fe:	22 95       	swap	r18
 100:	22 0f       	add	r18, r18
 102:	22 0f       	add	r18, r18
 104:	20 7c       	andi	r18, 0xC0	; 192
 106:	12 c0       	rjmp	.+36     	; 0x12c <main+0xc0>
				else out >>= 2;
 108:	26 95       	lsr	r18
 10a:	26 95       	lsr	r18
 10c:	0f c0       	rjmp	.+30     	; 0x12c <main+0xc0>
				break;
			/*SW1 - Ολίσθηση κατά μία θέση αριστερά.*/
			case 0x02:	
				if (out & 0x80) out >>= 7;		//Όμοια για το ένα MSB.
 10e:	22 23       	and	r18, r18
 110:	24 f4       	brge	.+8      	; 0x11a <main+0xae>
 112:	22 1f       	adc	r18, r18
 114:	22 27       	eor	r18, r18
 116:	22 1f       	adc	r18, r18
 118:	09 c0       	rjmp	.+18     	; 0x12c <main+0xc0>
				else out <<= 1;
 11a:	22 0f       	add	r18, r18
 11c:	07 c0       	rjmp	.+14     	; 0x12c <main+0xc0>
				break;
			/*SW0 - Ολίσθηση κατά μία θέση δεξιά.*/
			case 0x01:
				if (out & 0x01) out <<= 7;		//Όμοια για το ένα LSB.
 11e:	20 ff       	sbrs	r18, 0
 120:	04 c0       	rjmp	.+8      	; 0x12a <main+0xbe>
 122:	27 95       	ror	r18
 124:	22 27       	eor	r18, r18
 126:	27 95       	ror	r18
 128:	01 c0       	rjmp	.+2      	; 0x12c <main+0xc0>
				else out >>= 1;
 12a:	26 95       	lsr	r18
				break;
			}
		PORTA = out;				//Απεικόνιση της εξόδου στη θύρα C.
 12c:	2b bb       	out	0x1b, r18	; 27
    }
 12e:	a9 cf       	rjmp	.-174    	; 0x82 <main+0x16>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
